# Define the CI/CD Workflow for Java code
name: Java CI with Maven
 
# Trigger the workflow on pushes to the specified branch
on:
  push:
    branches:
      - main
 
# Define permissions required for the OIDC connection
permissions:
  id-token: write                    # This is required for requesting the JWT
  contents: read                     # This permission allows reading the content of files in the repository
 
jobs:
  # CI Job
  ci:
    runs-on: ubuntu-latest   # self-hosted  
    steps:
      - name: Set short git commit SHA
        id: commit
        uses: prompt/actions-commit-hash@v2
        
      # Check out repository's code into workflow's workspace
      - name: Checkout code
        uses: actions/checkout@v4
 
      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
 
      # Run unit tests using Maven
      - name: Run unit tests
        run: mvn test
 
      # Generate code coverage report using JaCoCo
      - name: Get code coverage report
        run: mvn jacoco:report

      # Upload code coverage report as an artifact   
      - name: Code Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: jacoco-report
          path: target/site/jacoco/index.html

      # Build project and package JAR
      - name: Build project and package JAR
        run: mvn package -Dmaven.test.skip
 
      # Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
 
      # Authenticate AWS with Docker to interact with Amazon ECR
      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
 
      # Build the Docker image using Dockerfile & tag it with commit SHA, & push it to ECR repository
      - name: Build Docker Image
        env:
          IMAGE_TAG: ${{ steps.commit.outputs.short }}
        run: |
          docker build -t humanresource:${{ github.sha }} .
          docker tag humanresource:${{ github.sha }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/humanresource:${{ github.sha }}
 
      # Run Trivy vulnerability scanner on specified Docker image
      - name: Run Trivy vulnerability scanner
        id: trivy-scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/humanresource:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true
 
      # Handle Trivy scan results
      - name: Handle Trivy results
        run: |
          if [ "${{ steps.trivy-scan.outcome }}" == "failure" ]; then
            echo "Vulnerability scan failed!"
          else
            echo "Vulnerability scan succeeded!"
          fi
 
      # Push Docker image to Amazon ECR
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/humanresource:${{ github.sha }}

  # Deployment Job
  deploy_to_eks:
    runs-on: ubuntu-latest
    needs: ci  # Ensure this job runs after the CI job
    steps:
      - name: Set up AWS CLI and kubectl
        run: |
          echo "Setting up AWS CLI and kubectl"
          apt-get update && apt-get install -y curl unzip
          # Install AWS CLI
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install --bin-dir $HOME/.local/bin --install-dir $HOME/.aws-cli
          export PATH=$HOME/.local/bin:$PATH
          aws --version
          
          # Install kubectl
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          mv ./kubectl $HOME/.local/bin/kubectl
          export PATH=$HOME/.local/bin:$PATH
          kubectl version --client
          
      # Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      # Update kubeconfig
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      # Deploy to EKS
      - name: Deploy to EKS
        run: |
          kubectl get nodes
          kubectl delete ns aish || true
          kubectl create ns aish
          git clone https://github.com/Aishwaryak15/javatestcasesforsonar.git
          kubectl apply -f manifests/deployment.yaml -n aish
          kubectl apply -f manifests/service.yaml -n aish
          kubectl get pods -n aish
